"""
庄家行为识别模块

本模块实现了"跟随庄家"策略的核心算法，用于识别市场中可能存在的庄家操纵行为。
主要功能包括：
1. 异常交易量识别
2. 价格操纵模式识别
3. 大单流向分析
4. 资金流入流出分析
5. 庄家操作评分系统

作者：Manus
日期：2025-05-16
"""

import os
import logging
import numpy as np
import pandas as pd
from typing import Dict, List, Union, Optional, Tuple, Any
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from scipy import stats
import talib as ta

# 配置日志
logger = logging.getLogger(__name__)

class SmartMoneyDetector:
    """庄家行为识别器，实现各种庄家操纵行为的识别算法"""
    
    def __init__(self, config: Dict = None):
        """
        初始化庄家行为识别器
        
        参数:
            config: 配置信息，包含各种阈值和参数
        """
        self.config = config or {}
        
        # 设置默认参数
        self.volume_threshold = self.config.get('volume_threshold', 3.0)  # 成交量异常阈值（标准差倍数）
        self.price_manipulation_window = self.config.get('price_manipulation_window', 20)  # 价格操纵检测窗口
        self.big_order_threshold = self.config.get('big_order_threshold', 1000000)  # 大单阈值（元）
        self.concentration_threshold = self.config.get('concentration_threshold', 0.6)  # 资金集中度阈值
        self.manipulation_score_threshold = self.config.get('manipulation_score_threshold', 70)  # 操纵评分阈值
        
        # 初始化结果缓存
        self.result_cache = {}
        
        logger.info("庄家行为识别器初始化成功")
    
    def detect_volume_anomalies(self, data: pd.DataFrame, window: int = 20) -> pd.DataFrame:
        """
        检测成交量异常
        
        参数:
            data: 包含OHLCV数据的DataFrame
            window: 滑动窗口大小
            
        返回:
            添加了成交量异常标记的DataFrame
        """
        if data.empty:
            logger.warning("输入数据为空，无法检测成交量异常")
            return data
        
        # 确保数据包含必要的列
        required_cols = ['volume']
        if not all(col in data.columns for col in required_cols):
            logger.error(f"输入数据缺少必要的列: {required_cols}")
            return data
        
        # 复制输入数据
        result = data.copy()
        
        try:
            # 计算成交量的对数收益率
            result['volume_log_return'] = np.log(result['volume'] / result['volume'].shift(1))
            
            # 计算成交量对数收益率的滚动均值和标准差
            result['volume_log_return_mean'] = result['volume_log_return'].rolling(window=window).mean()
            result['volume_log_return_std'] = result['volume_log_return'].rolling(window=window).std()
            
            # 计算成交量Z得分
            result['volume_zscore'] = (result['volume_log_return'] - result['volume_log_return_mean']) / result['volume_log_return_std']
            
            # 标记异常成交量
            result['volume_anomaly'] = np.where(
                result['volume_zscore'] > self.volume_threshold,
                1,  # 异常增加
                np.where(
                    result['volume_zscore'] < -self.volume_threshold,
                    -1,  # 异常减少
                    0  # 正常
                )
            )
            
            # 计算连续异常天数
            result['consecutive_anomalies'] = 0
            anomaly_count = 0
            
            for i in range(len(result)):
                if result['volume_anomaly'].iloc[i] != 0:
                    anomaly_count += 1
                else:
                    anomaly_count = 0
                result['consecutive_anomalies'].iloc[i] = anomaly_count
            
            # 删除中间计算列
            result = result.drop(['volume_log_return', 'volume_log_return_mean', 'volume_log_return_std'], axis=1)
            
            logger.info("成交量异常检测完成")
            return result
        
        except Exception as e:
            logger.error(f"成交量异常检测失败: {e}")
            return data
    
    def detect_price_manipulation(self, data: pd.DataFrame, window: int = None) -> pd.DataFrame:
        """
        检测价格操纵模式
        
        参数:
            data: 包含OHLCV数据的DataFrame
            window: 滑动窗口大小，如果为None则使用默认值
            
        返回:
            添加了价格操纵标记的DataFrame
        """
        if data.empty:
            logger.warning("输入数据为空，无法检测价格操纵")
            return data
        
        # 确保数据包含必要的列
        required_cols = ['open', 'high', 'low', 'close', 'volume']
        if not all(col in data.columns for col in required_cols):
            logger.error(f"输入数据缺少必要的列: {required_cols}")
            return data
        
        # 使用默认窗口大小（如果未指定）
        if window is None:
            window = self.price_manipulation_window
        
        # 复制输入数据
        result = data.copy()
        
        try:
            # 计算价格波动率
            result['price_volatility'] = (result['high'] - result['low']) / result['low']
            
            # 计算价格波动率的滚动均值和标准差
            result['price_volatility_mean'] = result['price_volatility'].rolling(window=window).mean()
            result['price_volatility_std'] = result['price_volatility'].rolling(window=window).std()
            
            # 计算价格波动率Z得分
            result['price_volatility_zscore'] = (result['price_volatility'] - result['price_volatility_mean']) / result['price_volatility_std']
            
            # 计算价格与成交量的相关性
            result['price_volume_corr'] = 0.0
            
            for i in range(window, len(result)):
                price_changes = result['close'].iloc[i-window:i].pct_change().dropna()
                volume_changes = result['volume'].iloc[i-window:i].pct_change().dropna()
                
                if len(price_changes) > 2 and len(volume_changes) > 2:
                    corr, _ = stats.pearsonr(price_changes, volume_changes)
                    result['price_volume_corr'].iloc[i] = corr
            
            # 检测拉高出货模式
            result['pump_dump_pattern'] = 0
            
            for i in range(window, len(result)):
                # 拉高阶段：价格持续上涨，成交量放大
                price_up = result['close'].iloc[i-window:i].pct_change().rolling(5).sum() > 0.1
                volume_up = result['volume'].iloc[i-window:i].pct_change().rolling(5).sum() > 0.5
                
                if price_up.iloc[-1] and volume_up.iloc[-1]:
                    # 检查是否有出货迹象：价格开始回落，成交量继续放大
                    if result['close'].iloc[i] < result['close'].iloc[i-1] and result['volume'].iloc[i] > result['volume'].iloc[i-1]:
                        result['pump_dump_pattern'].iloc[i] = 1
            
            # 检测洗盘模式
            result['shakeout_pattern'] = 0
            
            for i in range(window, len(result)):
                # 洗盘特征：价格快速下跌后快速反弹，成交量先放大后减小
                price_drop = result['close'].iloc[i-5:i-2].pct_change().sum() < -0.05
                price_rebound = result['close'].iloc[i-2:i].pct_change().sum() > 0.03
                volume_pattern = (result['volume'].iloc[i-5] < result['volume'].iloc[i-3]) and (result['volume'].iloc[i-3] > result['volume'].iloc[i-1])
                
                if price_drop and price_rebound and volume_pattern:
                    result['shakeout_pattern'].iloc[i] = 1
            
            # 计算综合价格操纵评分
            result['price_manipulation_score'] = (
                np.abs(result['price_volatility_zscore']) * 0.3 +
                np.abs(result['price_volume_corr']) * 0.3 +
                result['pump_dump_pattern'] * 0.2 +
                result['shakeout_pattern'] * 0.2
            ) * 100
            
            # 标记价格操纵
            result['price_manipulation'] = np.where(
                result['price_manipulation_score'] > 70,
                1,  # 强烈操纵迹象
                np.where(
                    result['price_manipulation_score'] > 50,
                    0.5,  # 中等操纵迹象
                    0  # 无明显操纵
                )
            )
            
            # 删除中间计算列
            result = result.drop(['price_volatility_mean', 'price_volatility_std'], axis=1)
            
            logger.info("价格操纵检测完成")
            return result
        
        except Exception as e:
            logger.error(f"价格操纵检测失败: {e}")
            return data
    
    def analyze_big_orders(self, data: pd.DataFrame, big_orders: pd.DataFrame = None) -> pd.DataFrame:
        """
        分析大单流向
        
        参数:
            data: 包含OHLCV数据的DataFrame
            big_orders: 大单数据DataFrame，如果为None则使用内部方法估算
            
        返回:
            添加了大单分析结果的DataFrame
        """
        if data.empty:
            logger.warning("输入数据为空，无法分析大单流向")
            return data
        
        # 确保数据包含必要的列
        required_cols = ['close', 'volume']
        if not all(col in data.columns for col in required_cols):
            logger.error(f"输入数据缺少必要的列: {required_cols}")
            return data
        
        # 复制输入数据
        result = data.copy()
        
        try:
            # 如果没有提供大单数据，则使用内部方法估算
            if big_orders is None:
                # 估算大单：成交量超过平均成交量2倍且金额超过阈值的交易
                avg_volume = result['volume'].rolling(window=20).mean()
                result['estimated_big_order'] = np.where(
                    (result['volume'] > avg_volume * 2) & (result['volume'] * result['close'] > self.big_order_threshold),
                    1,
                    0
                )
                
                # 估算大单方向：根据价格变动判断
                result['estimated_big_order_direction'] = np.where(
                    result['estimated_big_order'] == 1,
                    np.sign(result['close'] - result['close'].shift(1)),
                    0
                )
                
                # 计算大单净流入
                result['big_order_net_inflow'] = np.where(
                    result['estimated_big_order'] == 1,
                    result['volume'] * result['close'] * result['estimated_big_order_direction'],
                    0
                )
            else:
                # 使用提供的大单数据
                # 假设big_orders包含date, volume, direction列
                # 合并大单数据
                big_orders_daily = big_orders.groupby(big_orders['date'].dt.date).agg({
                    'volume': 'sum',
                    'direction': lambda x: sum(x) / len(x)  # 平均方向，正为买入，负为卖出
                }).reset_index()
                
                # 确保result有日期索引
                if not isinstance(result.index, pd.DatetimeIndex):
                    if 'date' in result.columns:
                        result['date'] = pd.to_datetime(result['date'])
                        result.set_index('date', inplace=True)
                    else:
                        logger.warning("无法合并大单数据，输入数据缺少日期列")
                        return result
                
                # 将大单数据合并到结果中
                big_orders_daily['date'] = pd.to_datetime(big_orders_daily['date'])
                big_orders_daily.set_index('date', inplace=True)
                
                result = pd.merge(
                    result,
                    big_orders_daily,
                    left_index=True,
                    right_index=True,
                    how='left',
                    suffixes=('', '_big_order')
                )
                
                # 填充缺失值
                result['volume_big_order'] = result['volume_big_order'].fillna(0)
                result['direction'] = result['direction'].fillna(0)
                
                # 计算大单净流入
                result['big_order_net_inflow'] = result['volume_big_order'] * result['close'] * result['direction']
            
            # 计算大单累计净流入（5日、10日、20日）
            result['big_order_net_inflow_5d'] = result['big_order_net_inflow'].rolling(window=5).sum()
            result['big_order_net_inflow_10d'] = result['big_order_net_inflow'].rolling(window=10).sum()
            result['big_order_net_inflow_20d'] = result['big_order_net_inflow'].rolling(window=20).sum()
            
            # 计算大单占比
            result['big_order_ratio'] = np.where(
                result['volume'] > 0,
                result['big_order_net_inflow'].abs() / (result['volume'] * result['close']),
                0
            )
            
            # 计算大单集中度
            result['big_order_concentration'] = result['big_order_ratio'].rolling(window=5).mean()
            
            # 标记大单异常
            result['big_order_anomaly'] = np.where(
                (result['big_order_concentration'] > self.concentration_threshold) & (result['big_order_net_inflow_5d'] > 0),
                1,  # 大单买入集中
                np.where(
                    (result['big_order_concentration'] > self.concentration_threshold) & (result['big_order_net_inflow_5d'] < 0),
                    -1,  # 大单卖出集中
                    0  # 无异常
                )
            )
            
            logger.info("大单流向分析完成")
            return result
        
        except Exception as e:
            logger.error(f"大单流向分析失败: {e}")
            return data
    
    def analyze_fund_flow(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        分析资金流入流出
        
        参数:
            data: 包含OHLCV数据的DataFrame
            
        返回:
            添加了资金流向分析结果的DataFrame
        """
        if data.empty:
            logger.warning("输入数据为空，无法分析资金流向")
            return data
        
        # 确保数据包含必要的列
        required_cols = ['open', 'high', 'low', 'close', 'volume']
        if not all(col in data.columns for col in required_cols):
            logger.error(f"输入数据缺少必要的列: {required_cols}")
            return data
        
        # 复制输入数据
        result = data.copy()
        
        try:
            # 计算典型价格
            result['typical_price'] = (result['high'] + result['low'] + result['close']) / 3
            
            # 计算资金流量
            result['money_flow'] = result['typical_price'] * result['volume']
            
            # 计算正向资金流和负向资金流
            result['positive_flow'] = np.where(
                result['typical_price'] > result['typical_price'].shift(1),
                result['money_flow'],
                0
            )
            
            result['negative_flow'] = np.where(
                result['typical_price'] < result['typical_price'].shift(1),
                result['money_flow'],
                0
            )
            
            # 计算资金流指标（MFI）
            for period in [14, 28, 56]:
                # 计算正向资金流和负向资金流的周期和
                positive_flow_sum = result['positive_flow'].rolling(window=period).sum()
                negative_flow_sum = result['negative_flow'].rolling(window=period).sum()
                
                # 计算资金比率
                money_ratio = np.where(
                    negative_flow_sum != 0,
                    positive_flow_sum / negative_flow_sum,
                    100  # 避免除以零
                )
                
                # 计算资金流指标
                result[f'mfi_{period}'] = 100 - (100 / (1 + money_ratio))
            
            # 计算资金流指标背离
            result['mfi_divergence'] = 0
            
            for i in range(14, len(result)):
                # 价格创新高但MFI未创新高（顶背离）
                if (result['close'].iloc[i] > result['close'].iloc[i-14:i].max()) and (result['mfi_14'].iloc[i] < result['mfi_14'].iloc[i-14:i].max()):
                    result['mfi_divergence'].iloc[i] = -1  # 顶背离
                
                # 价格创新低但MFI未创新低（底背离）
                elif (result['close'].iloc[i] < result['close'].iloc[i-14:i].min()) and (result['mfi_14'].iloc[i] > result['mfi_14'].iloc[i-14:i].min()):
                    result['mfi_divergence'].iloc[i] = 1  # 底背离
            
            # 计算资金流向评分
            result['fund_flow_score'] = (
                (result['mfi_14'] / 100) * 0.4 +
                (result['mfi_28'] / 100) * 0.3 +
                (result['mfi_56'] / 100) * 0.3
            ) * 100
            
            # 标记资金流向异常
            result['fund_flow_anomaly'] = np.where(
                result['fund_flow_score'] > 80,
                1,  # 资金强烈流入
                np.where(
                    result['fund_flow_score'] < 20,
                    -1,  # 资金强烈流出
                    0  # 正常
                )
            )
            
            # 删除中间计算列
            result = result.drop(['typical_price', 'money_flow', 'positive_flow', 'negative_flow'], axis=1)
            
            logger.info("资金流向分析完成")
            return result
        
        except Exception as e:
            logger.error(f"资金流向分析失败: {e}")
            return data
    
    def calculate_manipulation_score(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        计算庄家操纵评分
        
        参数:
            data: 包含各种分析结果的DataFrame
            
        返回:
            添加了庄家操纵评分的DataFrame
        """
        if data.empty:
            logger.warning("输入数据为空，无法计算庄家操纵评分")
            return data
        
        # 复制输入数据
        result = data.copy()
        
        try:
            # 检查是否已经进行了必要的分析
            required_indicators = [
                'volume_zscore', 'price_manipulation_score', 
                'big_order_anomaly', 'fund_flow_score'
            ]
            
            missing_indicators = [ind for ind in required_indicators if ind not in result.columns]
            
            # 如果缺少指标，先进行相应的分析
            if 'volume_zscore' in missing_indicators:
                result = self.detect_volume_anomalies(result)
            
            if 'price_manipulation_score' in missing_indicators:
                result = self.detect_price_manipulation(result)
            
            if 'big_order_anomaly' in missing_indicators:
                result = self.analyze_big_orders(result)
            
            if 'fund_flow_score' in missing_indicators:
                result = self.analyze_fund_flow(result)
            
            # 计算综合操纵评分
            result['manipulation_score'] = (
                np.abs(result['volume_zscore']) * 0.25 +
                (result['price_manipulation_score'] / 100) * 0.35 +
                np.abs(result['big_order_anomaly']) * 0.2 +
                (np.abs(result['fund_flow_score'] - 50) / 50) * 0.2
            ) * 100
            
            # 标记操纵可能性
            result['manipulation_probability'] = np.where(
                result['manipulation_score'] > self.manipulation_score_threshold,
                'high',  # 高操纵可能性
                np.where(
                    result['manipulation_score'] > self.manipulation_score_threshold * 0.7,
                    'medium',  # 中等操纵可能性
                    'low'  # 低操纵可能性
                )
            )
            
            # 计算操纵方向
            result['manipulation_direction'] = np.where(
                result['manipulation_score'] > self.manipulation_score_threshold * 0.7,
                np.sign(result['big_order_net_inflow_5d']),  # 根据大单净流入判断方向
                0  # 无明显操纵
            )
            
            logger.info("庄家操纵评分计算完成")
            return result
        
        except Exception as e:
            logger.error(f"庄家操纵评分计算失败: {e}")
            return data
    
    def detect_smart_money(self, data: pd.DataFrame, stock_code: str = None) -> pd.DataFrame:
        """
        检测庄家行为（主函数）
        
        参数:
            data: 包含OHLCV数据的DataFrame
            stock_code: 股票代码，用于缓存结果
            
        返回:
            添加了庄家行为检测结果的DataFrame
        """
        if data.empty:
            logger.warning("输入数据为空，无法检测庄家行为")
            return data
        
        # 检查缓存
        if stock_code and stock_code in self.result_cache:
            cache_date = self.result_cache[stock_code]['date']
            latest_date = data.index[-1] if isinstance(data.index, pd.DatetimeIndex) else data['date'].iloc[-1]
            
            # 如果缓存结果是最新的，直接返回
            if cache_date == latest_date:
                logger.info(f"使用缓存的庄家行为检测结果 - 股票: {stock_code}")
                return self.result_cache[stock_code]['result']
        
        try:
            # 1. 检测成交量异常
            result = self.detect_volume_anomalies(data)
            
            # 2. 检测价格操纵模式
            result = self.detect_price_manipulation(result)
            
            # 3. 分析大单流向
            result = self.analyze_big_orders(result)
            
            # 4. 分析资金流入流出
            result = self.analyze_fund_flow(result)
            
            # 5. 计算庄家操纵评分
            result = self.calculate_manipulation_score(result)
            
            # 更新缓存
            if stock_code:
                latest_date = result.index[-1] if isinstance(result.index, pd.DatetimeIndex) else result['date'].iloc[-1]
                self.result_cache[stock_code] = {
                    'date': latest_date,
                    'result': result
                }
            
            logger.info("庄家行为检测完成")
            return result
        
        except Exception as e:
            logger.error(f"庄家行为检测失败: {e}")
            return data
    
    def plot_manipulation_indicators(self, data: pd.DataFrame, stock_code: str = None, save_path: str = None) -> None:
        """
        绘制庄家操纵指标图表
        
        参数:
            data: 包含庄家行为检测结果的DataFrame
            stock_code: 股票代码，用于标题
            save_path: 图表保存路径，如果为None则显示图表
        """
        if data.empty:
            logger.warning("输入数据为空，无法绘制图表")
            return
        
        # 确保数据包含必要的列
        required_cols = ['close', 'volume', 'manipulation_score']
        if not all(col in data.columns for col in required_cols):
            logger.error(f"输入数据缺少必要的列: {required_cols}")
            return
        
        try:
            # 创建图表
            fig, axes = plt.subplots(4, 1, figsize=(12, 16), sharex=True)
            
            # 设置标题
            title = "庄家操纵指标分析"
            if stock_code:
                title += f" - {stock_code}"
            fig.suptitle(title, fontsize=16)
            
            # 1. 价格和成交量
            ax1 = axes[0]
            ax1.set_title("价格和成交量")
            ax1.plot(data.index, data['close'], 'b-', label='收盘价')
            ax1.set_ylabel('价格', color='b')
            ax1.tick_params(axis='y', labelcolor='b')
            
            ax1_2 = ax1.twinx()
            ax1_2.bar(data.index, data['volume'], color='g', alpha=0.3, label='成交量')
            ax1_2.set_ylabel('成交量', color='g')
            ax1_2.tick_params(axis='y', labelcolor='g')
            
            # 2. 成交量异常和价格操纵
            ax2 = axes[1]
            ax2.set_title("成交量异常和价格操纵")
            ax2.plot(data.index, data['volume_zscore'], 'r-', label='成交量Z得分')
            ax2.plot(data.index, data['price_manipulation_score'] / 100, 'g-', label='价格操纵评分')
            ax2.set_ylabel('得分')
            ax2.legend()
            ax2.axhline(y=self.volume_threshold, color='r', linestyle='--', alpha=0.5)
            ax2.axhline(y=0.7, color='g', linestyle='--', alpha=0.5)
            
            # 3. 大单流向和资金流向
            ax3 = axes[2]
            ax3.set_title("大单流向和资金流向")
            ax3.plot(data.index, data['big_order_net_inflow_5d'] / 1e6, 'b-', label='5日大单净流入(百万)')
            ax3.plot(data.index, data['fund_flow_score'], 'g-', label='资金流向评分')
            ax3.set_ylabel('流向指标')
            ax3.legend()
            ax3.axhline(y=0, color='b', linestyle='--', alpha=0.5)
            ax3.axhline(y=50, color='g', linestyle='--', alpha=0.5)
            
            # 4. 庄家操纵评分
            ax4 = axes[3]
            ax4.set_title("庄家操纵评分")
            ax4.plot(data.index, data['manipulation_score'], 'r-', label='操纵评分')
            ax4.set_ylabel('评分')
            ax4.axhline(y=self.manipulation_score_threshold, color='r', linestyle='--', alpha=0.5)
            ax4.axhline(y=self.manipulation_score_threshold * 0.7, color='orange', linestyle='--', alpha=0.5)
            
            # 标记高操纵可能性区域
            high_manip = data[data['manipulation_probability'] == 'high']
            if not high_manip.empty:
                ax4.scatter(high_manip.index, high_manip['manipulation_score'], color='red', s=50, label='高操纵可能性')
            
            ax4.legend()
            
            # 设置x轴标签
            ax4.set_xlabel('日期')
            
            # 调整布局
            plt.tight_layout()
            plt.subplots_adjust(top=0.9)
            
            # 保存或显示图表
            if save_path:
                plt.savefig(save_path)
                logger.info(f"庄家操纵指标图表已保存到: {save_path}")
            else:
                plt.show()
                logger.info("庄家操纵指标图表已显示")
            
            plt.close(fig)
        
        except Exception as e:
            logger.error(f"绘制庄家操纵指标图表失败: {e}")
    
    def get_manipulation_summary(self, data: pd.DataFrame, stock_code: str = None) -> Dict:
        """
        获取庄家操纵分析摘要
        
        参数:
            data: 包含庄家行为检测结果的DataFrame
            stock_code: 股票代码
            
        返回:
            包含分析摘要的字典
        """
        if data.empty:
            logger.warning("输入数据为空，无法生成分析摘要")
            return {}
        
        # 确保数据包含必要的列
        required_cols = ['manipulation_score', 'manipulation_probability', 'manipulation_direction']
        if not all(col in data.columns for col in required_cols):
            logger.error(f"输入数据缺少必要的列: {required_cols}")
            return {}
        
        try:
            # 获取最新数据
            latest = data.iloc[-1]
            
            # 计算近期趋势（最近5个交易日）
            recent_data = data.iloc[-5:]
            score_trend = recent_data['manipulation_score'].diff().mean()
            
            # 生成分析摘要
            summary = {
                'stock_code': stock_code,
                'date': latest.name if isinstance(latest.name, (datetime, pd.Timestamp)) else data.index[-1],
                'latest_score': round(latest['manipulation_score'], 2),
                'probability': latest['manipulation_probability'],
                'direction': 'bullish' if latest['manipulation_direction'] > 0 else ('bearish' if latest['manipulation_direction'] < 0 else 'neutral'),
                'score_trend': 'increasing' if score_trend > 1 else ('decreasing' if score_trend < -1 else 'stable'),
                'volume_anomaly': bool(latest.get('volume_anomaly', 0) != 0),
                'price_manipulation': bool(latest.get('price_manipulation', 0) > 0),
                'big_order_anomaly': bool(latest.get('big_order_anomaly', 0) != 0),
                'fund_flow_anomaly': bool(latest.get('fund_flow_anomaly', 0) != 0),
                'recommendation': ''
            }
            
            # 生成推荐
            if summary['probability'] == 'high':
                if summary['direction'] == 'bullish':
                    summary['recommendation'] = '强烈建议跟随：庄家可能正在拉升，可考虑买入'
                elif summary['direction'] == 'bearish':
                    summary['recommendation'] = '注意风险：庄家可能正在出货，建议减仓或观望'
                else:
                    summary['recommendation'] = '保持关注：有明显庄家活动，但方向不明确'
            elif summary['probability'] == 'medium':
                if summary['direction'] == 'bullish':
                    summary['recommendation'] = '谨慎买入：有一定庄家活动迹象，方向偏多'
                elif summary['direction'] == 'bearish':
                    summary['recommendation'] = '谨慎观望：有一定庄家活动迹象，方向偏空'
                else:
                    summary['recommendation'] = '继续观察：有一定庄家活动迹象，但方向不明确'
            else:
                summary['recommendation'] = '自主决策：无明显庄家活动迹象'
            
            logger.info("庄家操纵分析摘要生成完成")
            return summary
        
        except Exception as e:
            logger.error(f"生成庄家操纵分析摘要失败: {e}")
            return {}



    def get_params(self):
        """
        获取庄家行为识别器的参数
        """
        return {
            'volume_threshold': getattr(self, 'volume_threshold', 2.0),
            'price_threshold': getattr(self, 'price_threshold', 0.02),
            'ma_periods': getattr(self, 'ma_periods', [5, 10, 20, 60]),
            'rsi_period': getattr(self, 'rsi_period', 14),
            'rsi_overbought': getattr(self, 'rsi_overbought', 70),
            'rsi_oversold': getattr(self, 'rsi_oversold', 30),
            'pattern_threshold': getattr(self, 'pattern_threshold', 0.7)
        }
# 测试代码
if __name__ == "__main__":
    # 配置日志
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # 创建示例数据
    dates = pd.date_range(start='2023-01-01', periods=100, freq='D')
    data = pd.DataFrame({
        'open': np.random.normal(100, 5, 100),
        'high': np.random.normal(105, 5, 100),
        'low': np.random.normal(95, 5, 100),
        'close': np.random.normal(100, 5, 100),
        'volume': np.random.normal(1000000, 200000, 100)
    }, index=dates)
    
    # 添加一些模拟的庄家操纵行为
    # 1. 拉高出货模式
    data.loc['2023-03-01':'2023-03-10', 'close'] = [100, 102, 105, 108, 112, 115, 118, 116, 112, 108]
    data.loc['2023-03-01':'2023-03-10', 'volume'] = [1000000, 1200000, 1500000, 1800000, 2000000, 2500000, 3000000, 3500000, 4000000, 3500000]
    
    # 2. 洗盘模式
    data.loc['2023-04-01':'2023-04-07', 'close'] = [100, 98, 95, 90, 92, 96, 100]
    data.loc['2023-04-01':'2023-04-07', 'volume'] = [1000000, 1500000, 2000000, 2500000, 2000000, 1500000, 1000000]
    
    # 确保high, low与close一致
    data['high'] = data['close'] + np.random.normal(5, 1, 100)
    data['low'] = data['close'] - np.random.normal(5, 1, 100)
    data['open'] = data['close'] - np.random.normal(0, 3, 100)
    
    try:
        # 初始化庄家行为识别器
        detector = SmartMoneyDetector()
        
        # 检测庄家行为
        result = detector.detect_smart_money(data, stock_code='000001')
        
        # 打印结果摘要
        summary = detector.get_manipulation_summary(result, stock_code='000001')
        print("庄家操纵分析摘要:")
        for key, value in summary.items():
            print(f"{key}: {value}")
        
        # 绘制图表
        detector.plot_manipulation_indicators(result, stock_code='000001')
        
    except Exception as e:
        logging.error(f"测试过程中发生错误: {e}")
